import{_ as a,c as s,o as e,ae as t}from"./chunks/framework.6g521mOR.js";const c=JSON.parse('{"title":"Named Pipe Communication","description":"","frontmatter":{"sidebar":false},"headers":[],"relativePath":"projects/named_pipe_communication.md","filePath":"projects/named_pipe_communication.md"}'),n={name:"projects/named_pipe_communication.md"};function p(r,i,o,l,h,k){return e(),s("div",null,i[0]||(i[0]=[t(`<h1 id="named-pipe-communication" tabindex="-1">Named Pipe Communication <a class="header-anchor" href="#named-pipe-communication" aria-label="Permalink to &quot;Named Pipe Communication&quot;">​</a></h1><p><strong>Coursework:</strong> Unix Systems Programming<br><strong>Tools:</strong> C, FIFO, mkfifo</p><hr><h2 id="project-overview" tabindex="-1">Project Overview <a class="header-anchor" href="#project-overview" aria-label="Permalink to &quot;Project Overview&quot;">​</a></h2><p>Demonstrates <strong>inter-process communication</strong> using named pipes (FIFOs). Two separate processes communicate via a shared pipe.</p><hr><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li>Read/write synchronization</li><li>Safe pipe cleanup and creation</li><li>Shell-driven testing interface</li></ul><hr><h2 id="sample-snippet" tabindex="-1">Sample Snippet <a class="header-anchor" href="#sample-snippet" aria-label="Permalink to &quot;Sample Snippet&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkfifo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myfifo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">666</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myfifo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, O_WRONLY);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fd, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><hr><h2 id="key-takeaways" tabindex="-1">Key Takeaways <a class="header-anchor" href="#key-takeaways" aria-label="Permalink to &quot;Key Takeaways&quot;">​</a></h2><ul><li>Gained practical IPC experience</li><li>Improved understanding of process coordination</li></ul>`,14)]))}const m=a(n,[["render",p]]);export{c as __pageData,m as default};
