import{_ as b,p as d,c as g,o as E,j as i,e as F,af as C,ag as D,a as A,t as _,C as w,ae as v,G as m,w as B}from"./chunks/framework.6g521mOR.js";const x={class:"wrapper"},S={class:"field"},I={class:"field"},q=["disabled"],P={key:0,class:"preview"},T=["src"],j={__name:"LSBEncode",setup(f){const r=d(null),e=d(""),h=d(null),p=d(null);function y(s){const a=s.target.files[0],k=new FileReader;k.onload=t=>{r.value=t.target.result},k.readAsDataURL(a)}function l(){const s=new Image;s.onload=()=>{const a=p.value.getContext("2d");p.value.width=s.width,p.value.height=s.height,a.drawImage(s,0,0);const k=a.getImageData(0,0,s.width,s.height),t=k.data,c=(e.value+"\0").split("").map(o=>o.charCodeAt(0).toString(2).padStart(8,"0")).join("");let u=0;for(let o=0;o<t.length&&u<c.length;o+=4)t[o]=t[o]&-2|parseInt(c[u]),u++;a.putImageData(k,0,0),h.value=p.value.toDataURL("image/png")},s.src=r.value}function n(){const s=document.createElement("a");s.href=h.value,s.download="stego_image.png",document.body.appendChild(s),s.click(),document.body.removeChild(s)}return(s,a)=>(E(),g("div",x,[a[3]||(a[3]=i("h2",{class:"title"},"🔐 Hide a Secret Message",-1)),i("div",S,[a[1]||(a[1]=i("label",null,"Step 1: Upload Image",-1)),i("input",{type:"file",accept:"image/*",onChange:y},null,32)]),i("div",I,[a[2]||(a[2]=i("label",null,"Step 2: Enter Message",-1)),C(i("input",{"onUpdate:modelValue":a[0]||(a[0]=k=>e.value=k),type:"text",placeholder:"Enter a secret message..."},null,512),[[D,e.value]])]),i("button",{onClick:l,disabled:!r.value||!e.value,class:"btn"},"Encode & Preview",8,q),h.value?(E(),g("div",P,[i("img",{src:h.value,class:"preview-img"},null,8,T),i("button",{class:"btn success",onClick:n},"Download Stego Image")])):F("",!0),i("canvas",{ref_key:"canvas",ref:p,class:"hidden"},null,512)]))}},L=b(j,[["__scopeId","data-v-44301568"]]),M={class:"wrapper"},R={class:"field"},U=["disabled"],V={key:0,class:"preview"},N=["src"],O={key:1,class:"message-box"},G={__name:"LSBDecode",setup(f){const r=d(null),e=d(""),h=d(null);function p(l){const n=l.target.files[0],s=new FileReader;s.onload=a=>{r.value=a.target.result},s.readAsDataURL(n)}function y(){const l=new Image;l.onload=()=>{const n=h.value.getContext("2d");h.value.width=l.width,h.value.height=l.height,n.drawImage(l,0,0);const s=n.getImageData(0,0,l.width,l.height).data;let a="";for(let t=0;t<s.length;t+=4)a+=(s[t]&1).toString();let k="";for(let t=0;t<a.length;t+=8){const c=a.slice(t,t+8);if(c==="00000000")break;k+=String.fromCharCode(parseInt(c,2))}e.value=k},l.src=r.value}return(l,n)=>(E(),g("div",M,[n[3]||(n[3]=i("h2",{class:"title"},"🕵️ Extract Hidden Message",-1)),i("div",R,[n[0]||(n[0]=i("label",null,"Upload Stego Image",-1)),i("input",{type:"file",accept:"image/*",onChange:p},null,32)]),i("button",{onClick:y,disabled:!r.value,class:"btn"},"Extract Message",8,U),r.value?(E(),g("div",V,[i("img",{src:r.value,class:"preview-img"},null,8,N)])):F("",!0),e.value?(E(),g("div",O,[n[1]||(n[1]=i("strong",null,"Hidden Message:",-1)),n[2]||(n[2]=i("br",null,null,-1)),A(" "+_(e.value),1)])):F("",!0),i("canvas",{ref_key:"canvas",ref:h,class:"hidden"},null,512)]))}},$=b(G,[["__scopeId","data-v-c1e98f5f"]]),J=JSON.parse('{"title":"LSB Steganography Encoder","description":"","frontmatter":{"sidebar":false},"headers":[],"relativePath":"projects/binary-encoder.md","filePath":"projects/binary-encoder.md"}'),H={name:"projects/binary-encoder.md"},W=Object.assign(H,{setup(f){return(r,e)=>{const h=w("ClientOnly");return E(),g("div",null,[e[1]||(e[1]=v('<h1 id="lsb-steganography-encoder" tabindex="-1">LSB Steganography Encoder <a class="header-anchor" href="#lsb-steganography-encoder" aria-label="Permalink to &quot;LSB Steganography Encoder&quot;">​</a></h1><p><strong>Team Members:</strong> Ryan Farley, Tushar Wani, Courtney Dickenson, Ariel Ong<br><strong>Role:</strong> Frontend Development, UI Design, Integration with Encoding Pipeline<br><strong>Tools:</strong> Vue.js, JavaScript, HTML, CSS</p><hr><h2 id="project-overview" tabindex="-1">Project Overview <a class="header-anchor" href="#project-overview" aria-label="Permalink to &quot;Project Overview&quot;">​</a></h2><p>This project implements a <strong>Least Significant Bit (LSB) steganography</strong> technique to embed secret messages within images. The frontend interface, developed using Vue.js, allows users to input messages and images, and then processes them to produce stego-images with hidden data.</p><h3 id="key-features" tabindex="-1">Key Features: <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features:&quot;">​</a></h3><ul><li><strong>User-Friendly Interface:</strong> Drag-and-drop file selection and intuitive text entry.</li><li><strong>Real-Time Feedback:</strong> Immediate rendering of the modified image and output.</li><li><strong>Downloadable Output:</strong> Allows users to save the generated stego-image locally.</li></ul><hr>',8)),m(h,null,{default:B(()=>[m(L),e[0]||(e[0]=i("br",null,null,-1)),m($)]),_:1,__:[0]}),e[2]||(e[2]=v(`<hr><h2 id="system-architecture" tabindex="-1">System Architecture <a class="header-anchor" href="#system-architecture" aria-label="Permalink to &quot;System Architecture&quot;">​</a></h2><h3 id="workflow-breakdown" tabindex="-1">Workflow Breakdown: <a class="header-anchor" href="#workflow-breakdown" aria-label="Permalink to &quot;Workflow Breakdown:&quot;">​</a></h3><ol><li><strong>Message Input:</strong> Users type in a message they want to hide.</li><li><strong>Image Selection:</strong> They upload an image in PNG format.</li><li><strong>Encoding Process:</strong> The message is encoded bit-by-bit into the LSBs of pixel color values.</li><li><strong>Output Generation:</strong> The tool renders the final stego-image and allows the user to download or preview it.</li></ol><hr><h2 id="code-highlights" tabindex="-1">Code Highlights <a class="header-anchor" href="#code-highlights" aria-label="Permalink to &quot;Code Highlights&quot;">​</a></h2><h3 id="_1-embedding-message-into-image" tabindex="-1">1. Embedding Message into Image <a class="header-anchor" href="#_1-embedding-message-into-image" aria-label="Permalink to &quot;1. Embedding Message into Image&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> embedMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">imageData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> binaryMessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> textToBinary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;00000000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Null character as delimiter</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageData.data.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// RGB channels</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (dataIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> binaryMessage.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        imageData.data[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 254</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Clear LSB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        imageData.data[i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(binaryMessage[dataIndex]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Set LSB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        dataIndex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageData;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @change</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;onImageUpload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;canvas&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> canvas</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onImageUpload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.target.files[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> img</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    img.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      canvas.value.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img.width;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      canvas.value.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img.height;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(img, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    img.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.target.result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAsDataURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><hr><h2 id="results" tabindex="-1">Results <a class="header-anchor" href="#results" aria-label="Permalink to &quot;Results&quot;">​</a></h2><ul><li>Achieved successful bit-level message embedding into PNG images using only the red channel LSB.</li><li>Generated stego-images retained visual fidelity — imperceptible difference to human eyes.</li><li>Extraction process correctly identified and reconstructed the original message, including null-terminated encoding.</li></ul><hr><h2 id="challenges-and-solutions" tabindex="-1">Challenges and Solutions <a class="header-anchor" href="#challenges-and-solutions" aria-label="Permalink to &quot;Challenges and Solutions&quot;">​</a></h2><h3 id="🔄-pixel-alignment-accuracy" tabindex="-1">🔄 Pixel Alignment Accuracy <a class="header-anchor" href="#🔄-pixel-alignment-accuracy" aria-label="Permalink to &quot;🔄 Pixel Alignment Accuracy&quot;">​</a></h3><ul><li><strong>Issue:</strong> Misalignment between message bits and image data led to garbled output.</li><li><strong>Fix:</strong> Ensured loop boundaries and bit counters were in sync; used null-terminated logic for message completion.</li></ul><h3 id="📦-image-format-constraints" tabindex="-1">📦 Image Format Constraints <a class="header-anchor" href="#📦-image-format-constraints" aria-label="Permalink to &quot;📦 Image Format Constraints&quot;">​</a></h3><ul><li><strong>Issue:</strong> JPEG compression ruined LSB consistency during testing.</li><li><strong>Fix:</strong> Enforced PNG-only uploads and tested multiple resolutions for consistency.</li></ul><h3 id="🔍-message-overflow" tabindex="-1">🔍 Message Overflow <a class="header-anchor" href="#🔍-message-overflow" aria-label="Permalink to &quot;🔍 Message Overflow&quot;">​</a></h3><ul><li><strong>Issue:</strong> Long messages could exceed image capacity.</li><li><strong>Fix:</strong> Implemented a check to prevent encoding if the message length exceeds pixel storage limit.</li></ul><hr><h2 id="future-enhancements" tabindex="-1">Future Enhancements <a class="header-anchor" href="#future-enhancements" aria-label="Permalink to &quot;Future Enhancements&quot;">​</a></h2><ul><li>Add <strong>message length pre-encoding check</strong> with dynamic image sizing guidance.</li><li>Extend support to <strong>multi-bit per pixel encoding</strong> for higher capacity.</li><li>Integrate <strong>AES encryption</strong> to protect plaintext prior to encoding.</li><li>Build a <strong>real-time progress bar</strong> for encode/decode operations.</li></ul><hr><h2 id="key-takeaways" tabindex="-1">Key Takeaways <a class="header-anchor" href="#key-takeaways" aria-label="Permalink to &quot;Key Takeaways&quot;">​</a></h2><ul><li><strong>Practical steganography</strong> is achievable with minimal tools and frontend logic.</li><li>Vue’s reactivity and canvas control made rapid iteration and visual feedback seamless.</li><li>LSB encoding highlights how easily data can be hidden in plain sight — and why media security matters.</li><li>This project builds foundational understanding for deeper work in <strong>image forensics</strong> and <strong>secure communication</strong>.</li></ul><hr>`,27))])}}});export{J as __pageData,W as default};
