import{_ as a,c as i,o as e,ae as t}from"./chunks/framework.6g521mOR.js";const c=JSON.parse('{"title":"ShareWood – Real Estate Investment Platform (HackUTD 3rd Place)","description":"","frontmatter":{"sidebar":false},"headers":[],"relativePath":"projects/ShareWood.md","filePath":"projects/ShareWood.md"}'),n={name:"projects/ShareWood.md"};function r(l,s,o,h,p,d){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="sharewood-–-real-estate-investment-platform-hackutd-3rd-place" tabindex="-1">ShareWood – Real Estate Investment Platform (HackUTD 3rd Place) <a class="header-anchor" href="#sharewood-–-real-estate-investment-platform-hackutd-3rd-place" aria-label="Permalink to &quot;ShareWood – Real Estate Investment Platform (HackUTD 3rd Place)&quot;">​</a></h1><p><strong>Team Members:</strong> Courtney Dickenson, Ryan Farley, Tushar Wani, Jarrod Rogers<br><strong>Role:</strong> Frontend Architecture, ML Model Integration, Firebase Auth, UI Design<br><strong>Tools:</strong> Vue.js, Quasar, Firebase, FastAPI, Python, Hugging Face ViLT, SCSS</p><hr><h2 id="project-overview" tabindex="-1">Project Overview <a class="header-anchor" href="#project-overview" aria-label="Permalink to &quot;Project Overview&quot;">​</a></h2><p><strong>ShareWood</strong> is a hackathon-built platform that enables <strong>fractional property investment</strong> through an AI-assisted interface. Created in 24 hours at <strong>HackUTD</strong>, the platform placed <strong>3rd overall</strong>, judged by CBRE (Commercial Real Estate).</p><p>It leverages <strong>ViLT</strong>, a vision-and-language transformer, to evaluate property condition from listing descriptions and uploaded images. Results are used to assist users in making smart, risk-aware investments.</p><h3 id="stack-snapshot" tabindex="-1">Stack Snapshot: <a class="header-anchor" href="#stack-snapshot" aria-label="Permalink to &quot;Stack Snapshot:&quot;">​</a></h3><ul><li>🔍 <strong>ViLT-based ML pipeline</strong> – property risk analysis using visual question answering</li><li>🛠️ <strong>Vue + Quasar</strong> frontend – responsive, mobile-first UI</li><li>🔐 <strong>Firebase</strong> backend – real-time data and auth</li><li>⚙️ <strong>FastAPI backend</strong> – handles share transactions and ML hooks</li></ul><hr><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li><p><strong>Visual Investment Scoring:</strong><br> ML model evaluates text/image pairs to assess property quality, damage, and safety.</p></li><li><p><strong>Firebase Authentication &amp; Shares:</strong><br> Users log in and assign fractional investment shares. Updates sync to Firebase in real time.</p></li><li><p><strong>Quasar-Powered Interface:</strong><br> UI built using Quasar for component reusability, mobile responsiveness, and fast prototyping.</p></li></ul><hr><h2 id="system-architecture" tabindex="-1">System Architecture <a class="header-anchor" href="#system-architecture" aria-label="Permalink to &quot;System Architecture&quot;">​</a></h2><h3 id="🔧-backend-api-fastapi-firebase" tabindex="-1">🔧 Backend API (FastAPI + Firebase) <a class="header-anchor" href="#🔧-backend-api-fastapi-firebase" aria-label="Permalink to &quot;🔧 Backend API (FastAPI + Firebase)&quot;">​</a></h3><ul><li><strong>FastAPI</strong> routes handle investment logic and authentication requests.</li><li><strong>Firebase Firestore</strong> stores user data and property listings.</li></ul><p><strong>Example Routes:</strong></p><ul><li><code>POST /buy</code>, <code>POST /sell</code> — Transaction logic</li><li><code>POST /register</code>, <code>POST /login</code> — Auth endpoints</li><li><code>POST /value</code> — Placeholder route for ML scoring integration</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@app.post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/buy/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process_buy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req: RequestBody):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req</span></span></code></pre></div><h3 id="🔐-cors-auth" tabindex="-1">🔐 CORS + Auth <a class="header-anchor" href="#🔐-cors-auth" aria-label="Permalink to &quot;🔐 CORS + Auth&quot;">​</a></h3><ul><li>Full CORS enabled for local testing (<code>localhost</code>)</li><li>Firebase Authentication managed session state and protected routes.</li></ul><h3 id="🔗-firestore-property-access" tabindex="-1">🔗 Firestore Property Access <a class="header-anchor" href="#🔗-firestore-property-access" aria-label="Permalink to &quot;🔗 Firestore Property Access&quot;">​</a></h3><p>Property metadata was accessed during API startup:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">users_ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.collection(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">docs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users_ref.stream()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> docs:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doc.id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doc.to_dict()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="machine-learning-pipeline" tabindex="-1">Machine Learning Pipeline <a class="header-anchor" href="#machine-learning-pipeline" aria-label="Permalink to &quot;Machine Learning Pipeline&quot;">​</a></h2><p>We used <strong>Hugging Face’s ViLT model</strong> (<code>dandelin/vilt-b32-finetuned-vqa</code>) for <strong>vision-language question answering</strong>. The system asked structured natural-language questions to inspect and grade property photos.</p><p>Example queries:</p><ul><li><em>Is this the inside or outside of a building?</em></li><li><em>Do the walls have cracks?</em></li><li><em>Is the floor made of wood, tile, or marble?</em></li><li><em>Would it be a safe neighborhood to live in?</em></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transformers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ViltProcessor, ViltForQuestionAnswering</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> answer_question</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(question, image_path):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ViltProcessor.from_pretrained(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ViltForQuestionAnswering.from_pretrained(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image.open(image_path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    encoding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor(image, question, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">return_tensors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    outputs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">encoding)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    top_prediction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model.config.id2label[outputs.logits.argmax(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).item()]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> top_prediction</span></span></code></pre></div><p>The answers were compiled into a property data profile (<code>data_set</code>) to estimate condition and risk level for potential investors.</p><hr><h2 id="challenges-and-fixes" tabindex="-1">Challenges and Fixes <a class="header-anchor" href="#challenges-and-fixes" aria-label="Permalink to &quot;Challenges and Fixes&quot;">​</a></h2><h3 id="🔐-firebase-auth-hiccups" tabindex="-1">🔐 Firebase Auth Hiccups <a class="header-anchor" href="#🔐-firebase-auth-hiccups" aria-label="Permalink to &quot;🔐 Firebase Auth Hiccups&quot;">​</a></h3><ul><li><strong>Issue:</strong> Auth state wasn’t syncing during hot reloads</li><li><strong>Fix:</strong> Added <code>onAuthStateChanged</code> listeners and route guards</li></ul><h3 id="🧠-model-runtime-limitations" tabindex="-1">🧠 Model Runtime Limitations <a class="header-anchor" href="#🧠-model-runtime-limitations" aria-label="Permalink to &quot;🧠 Model Runtime Limitations&quot;">​</a></h3><ul><li><strong>Issue:</strong> Hugging Face inference was slow on local machines</li><li><strong>Fix:</strong> Cached answers and ran batched queries ahead of time</li></ul><h3 id="💻-styling-conflicts" tabindex="-1">💻 Styling Conflicts <a class="header-anchor" href="#💻-styling-conflicts" aria-label="Permalink to &quot;💻 Styling Conflicts&quot;">​</a></h3><ul><li><strong>Issue:</strong> Layout issues from last-minute component merges</li><li><strong>Fix:</strong> Resolved with scoped SCSS and layout isolation</li></ul><hr><h2 id="results" tabindex="-1">Results <a class="header-anchor" href="#results" aria-label="Permalink to &quot;Results&quot;">​</a></h2><ul><li>✅ Fully functioning MVP with end-to-end auth, investment logic, and ML scoring</li><li>🥉 Placed 3rd at HackUTD judged by CBRE</li><li>🔄 Successfully demoed frontend-backend interaction and AI reasoning live</li></ul><hr><h2 id="future-plans" tabindex="-1">Future Plans <a class="header-anchor" href="#future-plans" aria-label="Permalink to &quot;Future Plans&quot;">​</a></h2><ul><li>Add blockchain for <strong>tokenized property shares</strong></li><li>Personalize investment suggestions using user behavior and ratings</li><li>Expand image models to include <strong>satellite views and neighborhood sentiment</strong></li></ul><hr><h2 id="key-takeaways" tabindex="-1">Key Takeaways <a class="header-anchor" href="#key-takeaways" aria-label="Permalink to &quot;Key Takeaways&quot;">​</a></h2><ul><li>Hackathon environments reward focus, modularity, and UI polish under pressure</li><li><strong>ViLT + VQA</strong> offers a novel way to interpret unstructured real estate data</li><li>The project proves that <strong>ML-backed real estate investing</strong> can be user-friendly, scalable, and fun</li></ul><hr>`,48)]))}const g=a(n,[["render",r]]);export{c as __pageData,g as default};
