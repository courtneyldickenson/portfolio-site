import{_ as i,c as a,o as e,ae as n}from"./chunks/framework.6g521mOR.js";const d=JSON.parse('{"title":"Uncooked Chicken Nuggets – Side-Scroller Game","description":"","frontmatter":{"sidebar":false},"headers":[],"relativePath":"projects/Uncooked_Chicken_Nuggets.md","filePath":"projects/Uncooked_Chicken_Nuggets.md"}'),l={name:"projects/Uncooked_Chicken_Nuggets.md"};function t(h,s,r,k,p,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="uncooked-chicken-nuggets-–-side-scroller-game" tabindex="-1">Uncooked Chicken Nuggets – Side-Scroller Game <a class="header-anchor" href="#uncooked-chicken-nuggets-–-side-scroller-game" aria-label="Permalink to &quot;Uncooked Chicken Nuggets – Side-Scroller Game&quot;">​</a></h1><p><strong>Team Members:</strong> Courtney Dickenson, Kristine Carrol, Grace Lynch, Ryan Farley, Tracy Huynh<br><strong>Role:</strong> Game Design, Physics Logic, Collectible System, Sound Integration<br><strong>Tools:</strong> Godot Engine, GDScript, Pixel Art, Open Game Art Assets</p><hr><h2 id="project-overview" tabindex="-1">Project Overview <a class="header-anchor" href="#project-overview" aria-label="Permalink to &quot;Project Overview&quot;">​</a></h2><p>A quirky, fast-paced <strong>2D platformer</strong> created for a graphics programming class. “Uncooked Chicken Nuggets” features absurd visuals, comedic sound effects, and collectible egg mechanics. The game focuses on <strong>sprite animation</strong>, <strong>physics-driven movement</strong>, and <strong>dynamic UI updates</strong> via <strong>Godot’s signal system</strong>.</p><hr><h2 id="core-gameplay" tabindex="-1">Core Gameplay <a class="header-anchor" href="#core-gameplay" aria-label="Permalink to &quot;Core Gameplay&quot;">​</a></h2><ul><li>🐔 Navigate frying pans, knife traps, and boiling oil</li><li>🥚 Collect eggs for points</li><li>🎮 Avoid hazards and reach the end of each level</li><li>🔊 Fun audio feedback for every interaction</li></ul><hr><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li><p><strong>Custom Platforming Physics</strong><br> Fine-tuned gravity, momentum, and air control.</p></li><li><p><strong>Egg Collection &amp; UI Binding</strong><br> Collectible eggs use <strong>signals</strong> to update the on-screen egg counter in real time.</p></li><li><p><strong>Modular Level Design</strong><br> Levels use reusable scenes for traps, enemies, and collectibles.</p></li></ul><hr><h2 id="code-highlights" tabindex="-1">Code Highlights <a class="header-anchor" href="#code-highlights" aria-label="Permalink to &quot;Code Highlights&quot;">​</a></h2><h3 id="_1-egg-collection-with-signals" tabindex="-1">1. Egg Collection with Signals <a class="header-anchor" href="#_1-egg-collection-with-signals" aria-label="Permalink to &quot;1. Egg Collection with Signals&quot;">​</a></h3><div class="language-gdscript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gdscript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Area2D</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">signal</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> collected</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _on_egg_body_entered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is_in_group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Player&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Signal emitted: Egg collected!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        emit_signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;collected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        queue_free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="_2-hud-signal-receiver" tabindex="-1">2. HUD Signal Receiver <a class="header-anchor" href="#_2-hud-signal-receiver" aria-label="Permalink to &quot;2. HUD Signal Receiver&quot;">​</a></h3><div class="language-gdscript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gdscript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CanvasLayer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> egg_count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _on_egg_collected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    egg_count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    $</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EggCounterLabel.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Eggs: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(egg_count)</span></span></code></pre></div><h3 id="_3-connecting-all-egg-signals" tabindex="-1">3. Connecting All Egg Signals <a class="header-anchor" href="#_3-connecting-all-egg-signals" aria-label="Permalink to &quot;3. Connecting All Egg Signals&quot;">​</a></h3><div class="language-gdscript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gdscript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node2D</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _ready</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> egg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_nodes_in_group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eggs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> egg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has_signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;collected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            egg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;collected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Callable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HUD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_on_egg_collected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h3 id="_4-player-movement-with-jump-logic" tabindex="-1">4. Player Movement with Jump Logic <a class="header-anchor" href="#_4-player-movement-with-jump-logic" aria-label="Permalink to &quot;4. Player Movement with Jump Logic&quot;">​</a></h3><div class="language-gdscript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">gdscript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CharacterBody2D</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GRAVITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 800</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JUMP_FORCE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">350</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _physics_process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(delta):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is_on_floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        velocity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GRAVITY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delta</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Input</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is_action_just_pressed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jump&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is_on_floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        velocity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JUMP_FORCE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    move_and_slide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><hr><h2 id="challenges-and-fixes" tabindex="-1">Challenges and Fixes <a class="header-anchor" href="#challenges-and-fixes" aria-label="Permalink to &quot;Challenges and Fixes&quot;">​</a></h2><h3 id="🥚-signal-confusion" tabindex="-1">🥚 Signal Confusion <a class="header-anchor" href="#🥚-signal-confusion" aria-label="Permalink to &quot;🥚 Signal Confusion&quot;">​</a></h3><ul><li><strong>Issue:</strong> Eggs wouldn’t always trigger the counter update.</li><li><strong>Fix:</strong> Ensured that all eggs were added to the <code>&quot;eggs&quot;</code> group and had the <code>collected</code> signal connected at runtime.</li></ul><h3 id="🎯-collision-inaccuracy" tabindex="-1">🎯 Collision Inaccuracy <a class="header-anchor" href="#🎯-collision-inaccuracy" aria-label="Permalink to &quot;🎯 Collision Inaccuracy&quot;">​</a></h3><ul><li><strong>Issue:</strong> Player hitboxes were misaligned, making platforming frustrating.</li><li><strong>Fix:</strong> Refined <code>CollisionShape2D</code> bounds and normalized physics tick rate.</li></ul><h3 id="🧃-juice-feedback" tabindex="-1">🧃 Juice &amp; Feedback <a class="header-anchor" href="#🧃-juice-feedback" aria-label="Permalink to &quot;🧃 Juice &amp; Feedback&quot;">​</a></h3><ul><li><strong>Issue:</strong> Game felt flat without sound or feedback.</li><li><strong>Fix:</strong> Added sound effects, squish animations, and counter bounce effect to polish feel.</li></ul><hr><h2 id="results" tabindex="-1">Results <a class="header-anchor" href="#results" aria-label="Permalink to &quot;Results&quot;">​</a></h2><ul><li>✅ Complete multi-level game demo with full physics and UI</li><li>🔁 Built-in egg collection system with working HUD</li><li>🔊 Audio-visual feedback on all major interactions</li><li>🎨 Custom sprites + reused pixel assets</li></ul><hr><h2 id="future-enhancements" tabindex="-1">Future Enhancements <a class="header-anchor" href="#future-enhancements" aria-label="Permalink to &quot;Future Enhancements&quot;">​</a></h2><ul><li>Add power-ups like nugget shields or hot sauce boosts</li><li>Include enemies and hit-point system</li><li>Refactor into a modular level loader for easier expansion</li><li>Add final boss: <em>The Deep Fryer King</em></li></ul><hr><h2 id="key-takeaways" tabindex="-1">Key Takeaways <a class="header-anchor" href="#key-takeaways" aria-label="Permalink to &quot;Key Takeaways&quot;">​</a></h2><ul><li>Signals in <strong>Godot</strong> are powerful for UI and gameplay decoupling</li><li>Building juice (sound, motion, feedback) made the game exponentially more fun</li><li>Learned structured scene hierarchies and reusability through Godot’s node system</li><li>Project taught key concepts in <strong>game physics</strong>, <strong>UX</strong>, and <strong>event handling</strong></li></ul><hr>`,39)]))}const c=i(l,[["render",t]]);export{d as __pageData,c as default};
