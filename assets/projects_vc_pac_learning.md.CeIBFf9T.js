import{_ as s,c as a,o as n,ae as e}from"./chunks/framework.6g521mOR.js";const E=JSON.parse('{"title":"VC Dimension and PAC Learning","description":"","frontmatter":{"sidebar":false},"headers":[],"relativePath":"projects/vc_pac_learning.md","filePath":"projects/vc_pac_learning.md"}'),t={name:"projects/vc_pac_learning.md"};function l(r,i,h,o,p,k){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="vc-dimension-and-pac-learning" tabindex="-1">VC Dimension and PAC Learning <a class="header-anchor" href="#vc-dimension-and-pac-learning" aria-label="Permalink to &quot;VC Dimension and PAC Learning&quot;">‚Äã</a></h1><p><strong>Author:</strong> Courtney Dickenson<br><strong>Course:</strong> CS 4375 ‚Äì Machine Learning Foundations<br><strong>Topic:</strong> VC Dimension, PAC Framework, Generalization Bounds<br><strong>Tools Used:</strong> Python (NumPy, Matplotlib) ‚Äî <strong>No scikit-learn used</strong></p><hr><h2 id="project-overview" tabindex="-1">Project Overview <a class="header-anchor" href="#project-overview" aria-label="Permalink to &quot;Project Overview&quot;">‚Äã</a></h2><p>This project focused on understanding <strong>generalization theory</strong> through the lens of <strong>VC dimension</strong> and <strong>Probably Approximately Correct (PAC)</strong> learning. It included formal mathematical proofs, derived bounds using <strong>Hoeffding‚Äôs Inequality</strong>, and ran synthetic simulations coded entirely from scratch.</p><hr><h2 id="key-concepts-demonstrated" tabindex="-1">Key Concepts Demonstrated <a class="header-anchor" href="#key-concepts-demonstrated" aria-label="Permalink to &quot;Key Concepts Demonstrated&quot;">‚Äã</a></h2><ul><li>Formal proof of VC dimension for unions of intervals and geometric hypotheses</li><li>Application of <strong>Hoeffding‚Äôs Inequality</strong> to bound generalization error</li><li>Simulation of learning curves and empirical error without any ML libraries</li><li>Comparison of finite hypothesis space bounds using the <strong>union bound</strong></li></ul><hr><h2 id="üìê-proof-vc-dimension-of-k-interval-union" tabindex="-1">üìê Proof: VC Dimension of k-Interval Union <a class="header-anchor" href="#üìê-proof-vc-dimension-of-k-interval-union" aria-label="Permalink to &quot;üìê Proof: VC Dimension of k-Interval Union&quot;">‚Äã</a></h2><h3 id="statement" tabindex="-1">Statement <a class="header-anchor" href="#statement" aria-label="Permalink to &quot;Statement&quot;">‚Äã</a></h3><p>The VC dimension of a hypothesis class that is a union of \\( k \\) intervals on the real line is exactly \\( 2k \\).</p><h3 id="proof" tabindex="-1">Proof <a class="header-anchor" href="#proof" aria-label="Permalink to &quot;Proof&quot;">‚Äã</a></h3><p><strong>Lower Bound:</strong><br> We construct \\( 2k \\) points that can be shattered by \\( k \\) disjoint intervals.</p><ul><li>Select \\( 2k \\) points in increasing order.</li><li>Any labeling of these as 1 (in-interval) or 0 (out-of-interval) can be covered using \\( k \\) intervals.</li></ul><p><strong>Upper Bound:</strong><br> Suppose we try to shatter \\( 2k + 1 \\) points.</p><ul><li>By the pigeonhole principle, there must be a pair of adjacent 1‚Äôs inside the same interval ‚Äî exceeding \\( k \\) total segments.</li><li>Therefore, VC dimension cannot exceed \\( 2k \\).</li></ul><p><strong>Conclusion:</strong><br> \\[ VC(H_k) = 2k \\]</p><hr><p>This is a block equation:</p><p>\\[ P(|\\hat{R}(h) - R(h)| &gt; \\epsilon) \\leq 2e^{-2n\\epsilon^2} \\]</p><h2 id="üìâ-applying-hoeffding-s-inequality" tabindex="-1">üìâ Applying Hoeffding‚Äôs Inequality <a class="header-anchor" href="#üìâ-applying-hoeffding-s-inequality" aria-label="Permalink to &quot;üìâ Applying Hoeffding‚Äôs Inequality&quot;">‚Äã</a></h2><h3 id="theory" tabindex="-1">Theory <a class="header-anchor" href="#theory" aria-label="Permalink to &quot;Theory&quot;">‚Äã</a></h3><p>To bound the true error \\( R(h) \\) with high probability, given empirical error \\( \\hat{R}(h) \\):</p><p>\\[ P(|\\hat{R}(h) - R(h)| &gt; \\epsilon) \\leq 2e^{-2n\\epsilon^2} \\]</p><p>Solving for \\( \\epsilon \\) given a confidence \\( \\delta \\):</p><p>\\[ \\epsilon = \\sqrt{\\frac{1}{2n} \\log\\left(\\frac{2}{\\delta}\\right)} \\]</p><hr><h2 id="üß™-code-simulation-‚Äì-error-bounds" tabindex="-1">üß™ Code Simulation ‚Äì Error Bounds <a class="header-anchor" href="#üß™-code-simulation-‚Äì-error-bounds" aria-label="Permalink to &quot;üß™ Code Simulation ‚Äì Error Bounds&quot;">‚Äã</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numpy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matplotlib.pyplot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simulate_empirical_risk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n, d, true_func):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.random.uniform(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (n, d))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> true_func(X)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    predictions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.sign(X[:, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># placeholder hypothesis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.mean(predictions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n_samples </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> np.arange(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">errors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [simulate_empirical_risk(n, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: np.sign(x[:, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n_samples]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.plot(n_samples, errors, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Empirical Error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.xlabel(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Sample Size&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.ylabel(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Error Rate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.title(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Empirical Risk vs Sample Size&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.grid(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.legend()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plt.show()</span></span></code></pre></div><hr><h2 id="üìä-union-bound-extension-finite-hypothesis-space" tabindex="-1">üìä Union Bound Extension (Finite Hypothesis Space) <a class="header-anchor" href="#üìä-union-bound-extension-finite-hypothesis-space" aria-label="Permalink to &quot;üìä Union Bound Extension (Finite Hypothesis Space)&quot;">‚Äã</a></h2><p>When the hypothesis class \\( H \\) is finite, the bound is given by:</p><p>\\[ P(\\exists h \\in H : |\\hat{R}(h) - R(h)| &gt; \\epsilon) \\leq 2|H|e^{-2n\\epsilon^2} \\]</p><p>This allows generalization error bounds to be applied across all functions in \\( H \\) simultaneously.</p><hr><h2 id="‚úÖ-final-results" tabindex="-1">‚úÖ Final Results <a class="header-anchor" href="#‚úÖ-final-results" aria-label="Permalink to &quot;‚úÖ Final Results&quot;">‚Äã</a></h2><ul><li>üîç Proved theoretical bounds using symbolic math</li><li>üß™ Simulated empirical error to validate convergence behavior</li><li>üìâ Modeled and visualized PAC bounds based on Hoeffding‚Äôs inequality</li></ul><hr><h2 id="üí¨-key-takeaways" tabindex="-1">üí¨ Key Takeaways <a class="header-anchor" href="#üí¨-key-takeaways" aria-label="Permalink to &quot;üí¨ Key Takeaways&quot;">‚Äã</a></h2><ul><li>Deepened intuition for VC dimension and its impact on generalization</li><li>Learned how to formally bound error using PAC guarantees</li><li>Built everything from scratch with <strong>no external ML libraries</strong> to reinforce mathematical foundations</li></ul>`,41)]))}const g=s(t,[["render",l]]);export{E as __pageData,g as default};
