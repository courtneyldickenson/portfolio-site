import{_ as a,c as i,o as e,ae as t}from"./chunks/framework.6g521mOR.js";const k=JSON.parse('{"title":"COLMAP 3D Reconstruction","description":"","frontmatter":{"sidebar":false},"headers":[],"relativePath":"projects/colmap.md","filePath":"projects/colmap.md"}'),n={name:"projects/colmap.md"};function l(r,s,o,h,p,d){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="colmap-3d-reconstruction" tabindex="-1">COLMAP 3D Reconstruction <a class="header-anchor" href="#colmap-3d-reconstruction" aria-label="Permalink to &quot;COLMAP 3D Reconstruction&quot;">​</a></h1><p><strong>Role:</strong> Developer, Pipeline Architect, 3D Point Cloud Engineer<br><strong>Tools:</strong> Python, pycolmap, SQLite, OpenCV, Meshroom, PLY/OBJ Export</p><hr><h2 id="project-overview" tabindex="-1">Project Overview <a class="header-anchor" href="#project-overview" aria-label="Permalink to &quot;Project Overview&quot;">​</a></h2><p>This project uses COLMAP (Structure-from-Motion and Multi-View Stereo) to reconstruct 3D environments from 2D images. By integrating the <code>pycolmap</code> Python bindings and a custom SQLite-based feature database, I created a fully scripted pipeline that outputs dense point clouds and textured models. The system mimics the functionality of COLMAP&#39;s GUI in a fully automated, code-based setup.</p><h3 id="key-focus-areas" tabindex="-1">Key Focus Areas: <a class="header-anchor" href="#key-focus-areas" aria-label="Permalink to &quot;Key Focus Areas:&quot;">​</a></h3><ul><li><strong>Automated SfM + MVS pipeline</strong> – Camera poses, depth maps, and mesh fusion, all script-driven.</li><li><strong>Database-first approach</strong> – Feature matches and camera intrinsics inserted manually using SQL.</li><li><strong>Export-ready results</strong> – Final models exported as <code>.ply</code> or <code>.obj</code> for use in Blender or printing.</li></ul><hr><h2 id="key-contributions" tabindex="-1">Key Contributions <a class="header-anchor" href="#key-contributions" aria-label="Permalink to &quot;Key Contributions&quot;">​</a></h2><ul><li><strong>Created a full Python pipeline</strong> for 3D reconstruction using <code>pycolmap</code> and SQLite.</li><li><strong>Inserted ORB keypoints and matches</strong> manually into COLMAP’s database structure.</li><li><strong>Triggered SfM and MVS steps</strong> directly via Python APIs.</li><li><strong>Handled depth fusion and model export</strong>, producing clean .ply point clouds.</li></ul><hr><h2 id="system-architecture" tabindex="-1">System Architecture <a class="header-anchor" href="#system-architecture" aria-label="Permalink to &quot;System Architecture&quot;">​</a></h2><h3 id="step-by-step-flow" tabindex="-1">Step-by-Step Flow: <a class="header-anchor" href="#step-by-step-flow" aria-label="Permalink to &quot;Step-by-Step Flow:&quot;">​</a></h3><ol><li><strong>Image Import</strong> – Photos are read and assigned camera intrinsics manually.</li><li><strong>Feature Extraction</strong> – ORB features are extracted using OpenCV and inserted into COLMAP&#39;s SQLite DB.</li><li><strong>Feature Matching</strong> – Custom matcher populates match table with valid image pairs.</li><li><strong>Structure-from-Motion</strong> – Sparse reconstruction estimates camera poses and keypoints.</li><li><strong>Multi-View Stereo</strong> – Produces dense depth maps using image consistency.</li><li><strong>Model Fusion</strong> – Converts depth maps into a dense fused point cloud and mesh.</li></ol><hr><h2 id="code-highlights" tabindex="-1">Code Highlights <a class="header-anchor" href="#code-highlights" aria-label="Permalink to &quot;Code Highlights&quot;">​</a></h2><h3 id="_1-inserting-images-into-colmap-db" tabindex="-1">1. Inserting Images into COLMAP DB <a class="header-anchor" href="#_1-inserting-images-into-colmap-db" aria-label="Permalink to &quot;1. Inserting Images into COLMAP DB&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sqlite3.connect(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;database.db&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cursor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conn.cursor()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add camera model</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cursor.execute(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">INSERT INTO cameras (camera_id, model, width, height, params, prior_focal_length)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">VALUES (?, ?, ?, ?, ?, ?)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1920</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1000.0,960.0,540.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add images</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idx, image_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(image_list):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cursor.execute(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    INSERT INTO images (image_id, name, camera_id) VALUES (?, ?, ?)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (idx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, os.path.basename(image_path), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conn.commit()</span></span></code></pre></div><h3 id="_2-running-sfm-mvs-programmatically" tabindex="-1">2. Running SfM + MVS Programmatically <a class="header-anchor" href="#_2-running-sfm-mvs-programmatically" aria-label="Permalink to &quot;2. Running SfM + MVS Programmatically&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pycolmap</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Sparse reconstruction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sfm_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pycolmap.incremental_mapping(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">database_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;database.db&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">image_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;images&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">output_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sparse&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Dense reconstruction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pycolmap.stereo.run_patch_match_stereo(sfm_result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pycolmap.stereo.run_fusion(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">output_path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dense&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="results" tabindex="-1">Results <a class="header-anchor" href="#results" aria-label="Permalink to &quot;Results&quot;">​</a></h2><ul><li><strong>Accurate camera pose estimation</strong> across real-world photosets</li><li><strong>Dense point clouds</strong> exported in PLY format, importable into Blender</li><li><strong>Fully automated reconstruction</strong>, no GUI usage required</li></ul><hr><h2 id="challenges-and-solutions" tabindex="-1">Challenges and Solutions <a class="header-anchor" href="#challenges-and-solutions" aria-label="Permalink to &quot;Challenges and Solutions&quot;">​</a></h2><h3 id="_1-understanding-colmap-s-schema" tabindex="-1">1. Understanding COLMAP’s Schema <a class="header-anchor" href="#_1-understanding-colmap-s-schema" aria-label="Permalink to &quot;1. Understanding COLMAP’s Schema&quot;">​</a></h3><ul><li><strong>Issue:</strong> SQLite structure isn’t documented officially.</li><li><strong>Fix:</strong> Reverse-engineered table formats and used working <code>.db</code> examples for comparison.</li></ul><h3 id="_2-match-accuracy" tabindex="-1">2. Match Accuracy <a class="header-anchor" href="#_2-match-accuracy" aria-label="Permalink to &quot;2. Match Accuracy&quot;">​</a></h3><ul><li><strong>Issue:</strong> Poor match quality caused sparse maps to fail.</li><li><strong>Fix:</strong> Tuned ORB parameters and filtered low-confidence matches.</li></ul><h3 id="_3-depth-map-noise" tabindex="-1">3. Depth Map Noise <a class="header-anchor" href="#_3-depth-map-noise" aria-label="Permalink to &quot;3. Depth Map Noise&quot;">​</a></h3><ul><li><strong>Issue:</strong> MVS depth maps were noisy in poorly lit areas.</li><li><strong>Fix:</strong> Added preprocessing filters and masked edge pixels.</li></ul><hr><h2 id="future-enhancements" tabindex="-1">Future Enhancements <a class="header-anchor" href="#future-enhancements" aria-label="Permalink to &quot;Future Enhancements&quot;">​</a></h2><ul><li>Replace ORB with learned features like SuperPoint or D2-Net</li><li>Add camera rig calibration support for multi-view sequences</li><li>Export to glTF for web-based 3D visualization</li></ul><hr><h2 id="key-takeaways" tabindex="-1">Key Takeaways <a class="header-anchor" href="#key-takeaways" aria-label="Permalink to &quot;Key Takeaways&quot;">​</a></h2><ul><li>Building this pipeline from scratch helped demystify COLMAP’s architecture.</li><li>Python integration allows full control of SfM/MVS workflows.</li><li>The fusion of <strong>computer vision, 3D geometry, and database logic</strong> makes this a standout portfolio project.</li></ul><hr>`,38)]))}const u=a(n,[["render",l]]);export{k as __pageData,u as default};
